{"hash":"b0453413bb39adb960d069d76793270617eb14e5","fesm2020":{"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nclass ScriptService {\n    constructor(zone) {\n        this.zone = zone;\n    }\n    registerScript(url, globalVar, onReady) {\n        const existingGlobalVar = window[globalVar];\n        if (existingGlobalVar) {\n            // global variable is present = script was already loaded\n            this.zone.run(() => {\n                onReady(existingGlobalVar);\n            });\n            return;\n        }\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.id = this.getElemId(globalVar);\n        scriptElem.innerHTML = '';\n        scriptElem.onload = () => {\n            this.zone.run(() => {\n                onReady(window[globalVar]);\n            });\n        };\n        scriptElem.src = url;\n        scriptElem.async = true;\n        scriptElem.defer = true;\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n    cleanup(globalVar) {\n        // remove script from DOM\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\n        if (scriptElem) {\n            scriptElem.remove();\n        }\n    }\n    getElemId(globalVar) {\n        return `ngx-paypal-script-elem-${globalVar}`;\n    }\n}\nScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: ScriptService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: ScriptService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass PayPalScriptService {\n    constructor(scriptService) {\n        this.scriptService = scriptService;\n        this.paypalWindowName = 'paypal';\n    }\n    registerPayPalScript(config, onReady) {\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n    destroyPayPalScript() {\n        this.scriptService.cleanup(this.paypalWindowName);\n    }\n    getUrlForConfig(config) {\n        const params = [\n            {\n                name: 'client-id',\n                value: config.clientId\n            }\n        ];\n        if (config.currency) {\n            params.push({\n                name: 'currency',\n                value: config.currency\n            });\n        }\n        if (config.commit) {\n            params.push({\n                name: 'commit',\n                value: config.commit\n            });\n        }\n        if (config.vault) {\n            params.push({\n                name: 'vault',\n                value: config.vault\n            });\n        }\n        if (config.intent) {\n            params.push({\n                name: 'intent',\n                value: config.intent\n            });\n        }\n        if (config.extraParams) {\n            params.push(...config.extraParams);\n        }\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n    getQueryString(queryParams) {\n        let queryString = '';\n        for (let i = 0; i < queryParams.length; i++) {\n            const queryParam = queryParams[i];\n            if (i === 0) {\n                queryString += '?';\n            }\n            else {\n                queryString += '&';\n            }\n            queryString += `${queryParam.name}=${queryParam.value}`;\n        }\n        return queryString;\n    }\n}\nPayPalScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PayPalScriptService, deps: [{ token: ScriptService }], target: i0.ɵɵFactoryTarget.Injectable });\nPayPalScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PayPalScriptService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PayPalScriptService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScriptService }]; } });\n\nclass NgxPaypalComponent {\n    constructor(paypalScriptService, cdr, ngZone) {\n        this.paypalScriptService = paypalScriptService;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n        /**\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\n         * sharing base configuration. In such a case only a single component may register script.\n         */\n        this.registerScript = true;\n        /**\n         * Emitted when paypal script is loaded\n         */\n        this.scriptLoaded = new EventEmitter();\n        this.ngUnsubscribe = new Subject();\n        /**\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\n         */\n        this.initializePayPal = true;\n    }\n    set payPalButtonContainer(content) {\n        this.payPalButtonContainerElem = content;\n    }\n    ngOnChanges(changes) {\n        if (!this.payPalButtonContainerId) {\n            this.payPalButtonContainerId = this.generateElementId();\n        }\n        // first time config setup\n        const config = this.config;\n        if (changes.config.isFirstChange()) {\n            if (config && this.registerScript) {\n                this.initPayPalScript(config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n        }\n        // changes to config\n        if (!changes.config.isFirstChange()) {\n            this.reinitialize(config);\n        }\n    }\n    ngOnDestroy() {\n        this.paypalScriptService.destroyPayPalScript();\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n    ngAfterViewInit() {\n        this.doPayPalCheck();\n    }\n    customInit(payPal) {\n        this.payPal = payPal;\n        this.doPayPalCheck();\n    }\n    reinitialize(config) {\n        this.config = config;\n        this.payPal = undefined;\n        this.paypalScriptService.destroyPayPalScript();\n        this.payPalButtonContainerId = this.generateElementId();\n        this.initializePayPal = true;\n        if (this.payPalButtonContainerElem) {\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n            }\n        }\n        this.cdr.detectChanges();\n        if (this.config) {\n            if (!this.payPal) {\n                this.initPayPalScript(this.config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n            else {\n                this.doPayPalCheck();\n            }\n        }\n    }\n    doPayPalCheck() {\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n            // make sure that id is also set\n            if (this.payPalButtonContainerElem.nativeElement.id) {\n                this.initializePayPal = false;\n                this.initPayPal(this.config, this.payPal);\n            }\n        }\n    }\n    initPayPalScript(config, initPayPal) {\n        console.log(\"init script\");\n        this.paypalScriptService.registerPayPalScript({\n            clientId: config.clientId,\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n            currency: config.currency,\n            vault: config.vault,\n            intent: config.intent,\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n        }, (paypal) => {\n            this.scriptLoaded.next(paypal);\n            initPayPal(paypal);\n        });\n    }\n    generateElementId() {\n        return `ngx-captcha-id-${new Date().valueOf()}`;\n    }\n    initPayPal(config, paypal) {\n        console.log(\"ran init\");\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n        this.ngZone.runOutsideAngular(() => {\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n            const createOrder = (data, actions) => {\n                return this.ngZone.run(() => {\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n                    }\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n                    }\n                    if (config.createOrderOnClient) {\n                        return actions.order.create(config.createOrderOnClient(data));\n                    }\n                    if (config.createOrderOnServer) {\n                        return config.createOrderOnServer(data);\n                    }\n                    throw Error(`Invalid state for 'createOrder'.`);\n                });\n            };\n            const createSubscription = (data, actions) => {\n                return this.ngZone.run(() => {\n                    if (config.createSubscriptionOnClient) {\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\n                    }\n                    return;\n                });\n            };\n            const onShippingChange = (data, actions) => {\n                return this.ngZone.run(() => {\n                    if (config.onShippingChange) {\n                        return config.onShippingChange(data, actions);\n                    }\n                });\n            };\n            const buttonsConfig = {\n                style: config.style,\n                onApprove: (data, actions) => {\n                    return this.ngZone.run(() => {\n                        if (config.onApprove) {\n                            config.onApprove(data, actions);\n                        }\n                        // capture on server\n                        if (config.authorizeOnServer) {\n                            return config.authorizeOnServer(data, actions);\n                        }\n                        // capture on client\n                        const onClientAuthorization = config.onClientAuthorization;\n                        if (onClientAuthorization) {\n                            actions.order.capture().then((details) => {\n                                this.ngZone.run(() => {\n                                    onClientAuthorization(details);\n                                });\n                            });\n                            return;\n                        }\n                        return;\n                    });\n                },\n                onError: (error) => {\n                    this.ngZone.run(() => {\n                        if (config.onError) {\n                            config.onError(error);\n                        }\n                    });\n                },\n                onCancel: (data, actions) => {\n                    this.ngZone.run(() => {\n                        if (config.onCancel) {\n                            config.onCancel(data, actions);\n                        }\n                    });\n                },\n                onClick: (data, actions) => {\n                    this.ngZone.run(() => {\n                        if (config.onClick) {\n                            config.onClick(data, actions);\n                        }\n                    });\n                },\n                onInit: (data, actions) => {\n                    this.ngZone.run(() => {\n                        if (config.onInit) {\n                            config.onInit(data, actions);\n                        }\n                    });\n                },\n                // Add the functions if they've been created in the config object\n                // The API only allows one of the two to be set\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\n                ...((config.createSubscriptionOnClient) && { createSubscription }),\n                // The onShippingChange callback cannot be used with subscriptions\n                // so we only add it if it is set\n                ...(config.onShippingChange && { onShippingChange })\n            };\n            console.log('button config');\n            console.log(buttonsConfig);\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n        });\n    }\n}\nNgxPaypalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaypalComponent, deps: [{ token: PayPalScriptService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nNgxPaypalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: NgxPaypalComponent, selector: \"ngx-paypal\", inputs: { config: \"config\", registerScript: \"registerScript\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, viewQueries: [{ propertyName: \"payPalButtonContainer\", first: true, predicate: [\"payPalButtonContainer\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaypalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'ngx-paypal',\n                    template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n                }]\n        }], ctorParameters: function () { return [{ type: PayPalScriptService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{\n                type: Input\n            }], registerScript: [{\n                type: Input\n            }], scriptLoaded: [{\n                type: Output\n            }], payPalButtonContainer: [{\n                type: ViewChild,\n                args: ['payPalButtonContainer', { static: false }]\n            }] } });\n\nclass NgxPayPalModule {\n}\nNgxPayPalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxPayPalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, declarations: [NgxPaypalComponent], imports: [CommonModule], exports: [NgxPaypalComponent] });\nNgxPayPalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, providers: [\n        ScriptService,\n        PayPalScriptService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        NgxPaypalComponent,\n                    ],\n                    exports: [\n                        NgxPaypalComponent,\n                    ],\n                    providers: [\n                        ScriptService,\n                        PayPalScriptService\n                    ]\n                }]\n        }] });\n\n/** Public API */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };\n//# sourceMappingURL=doctopia-ngx-paypal.mjs.map\n","map":{"version":3,"file":"doctopia-ngx-paypal.mjs","sources":["../../src/lib/services/script.service.ts","../../src/lib/services/paypal-script.service.ts","../../src/lib/components/paypal.component.ts","../../src/lib/ngx-paypal.module.ts","../../src/public_api.ts","../../src/doctopia-ngx-paypal.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\n\n@Injectable()\nexport class ScriptService {\n\n    constructor(\n        protected zone: NgZone,\n    ) {\n    }\n\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\n        const existingGlobalVar = (window as any)[globalVar];\n        if (existingGlobalVar) {\n            // global variable is present = script was already loaded\n            this.zone.run(() => {\n                onReady(existingGlobalVar);\n            });\n            return;\n        }\n\n\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.id = this.getElemId(globalVar);\n        scriptElem.innerHTML = '';\n        scriptElem.onload = () => {\n            this.zone.run(() => {\n                onReady((window as any)[globalVar]);\n            });\n        };\n        scriptElem.src = url;\n        scriptElem.async = true;\n        scriptElem.defer = true;\n\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n\n    cleanup(globalVar: string): void {\n        // remove script from DOM\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\n\n        if (scriptElem) {\n            scriptElem.remove();\n        }\n    }\n\n    private getElemId(globalVar: string): string {\n        return `ngx-paypal-script-elem-${globalVar}`;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { IPayPalUrlConfig, IQueryParam } from '../models/paypal-models';\nimport { ScriptService } from './script.service';\n\n@Injectable()\nexport class PayPalScriptService {\n\n    private readonly paypalWindowName = 'paypal';\n\n\n    constructor(\n        protected scriptService: ScriptService,\n    ) {\n    }\n\n    registerPayPalScript(config: IPayPalUrlConfig, onReady: (payPalApi: any) => void): void {\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n\n    destroyPayPalScript(): void {\n        this.scriptService.cleanup(this.paypalWindowName);\n    }\n\n    private getUrlForConfig(config: IPayPalUrlConfig): string {\n        const params: IQueryParam[] = [\n            {\n                name: 'client-id',\n                value: config.clientId\n            }\n        ];\n\n        if (config.currency) {\n            params.push({\n                name: 'currency',\n                value: config.currency\n            });\n        }\n\n        if (config.commit) {\n            params.push({\n                name: 'commit',\n                value: config.commit\n            });\n        }\n\n        if (config.vault) {\n            params.push({\n                name: 'vault',\n                value: config.vault\n            });\n        }\n\n        if (config.intent) {\n            params.push({\n                name: 'intent',\n                value: config.intent\n            });\n        }\n\n        if (config.extraParams) {\n            params.push(...config.extraParams);\n        }\n\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n\n    private getQueryString(queryParams: IQueryParam[]): string {\n        let queryString = '';\n\n        for (let i = 0; i < queryParams.length; i++) {\n            const queryParam = queryParams[i];\n            if (i === 0) {\n                queryString += '?';\n            } else {\n                queryString += '&';\n            }\n\n            queryString += `${queryParam.name}=${queryParam.value}`;\n        }\n\n        return queryString;\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport {\n    ICancelCallbackData,\n    IClientAuthorizeCallbackData,\n    ICreateOrderCallbackActions,\n    IInitCallbackData,\n    IOnApproveCallbackActions,\n    IOnApproveCallbackData,\n    IOnClickCallbackActions,\n    IOnInitCallbackActions,\n    IOnShippingChangeActions,\n    IOnShippingChangeData,\n    IPayPalConfig,\n    ICreateSubscriptionCallbackActions,\n    ICreateSubscriptionCallbackData,\n} from '../models/paypal-models';\nimport { PayPalScriptService } from '../services/paypal-script.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'ngx-paypal',\n    template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n})\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\n\n    /**\n     * Configuration for paypal.\n     */\n    @Input() config?: IPayPalConfig;\n\n    /**\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\n     * sharing base configuration. In such a case only a single component may register script.\n     */\n    @Input() registerScript: boolean = true;\n\n    /**\n     * Emitted when paypal script is loaded\n     */\n    @Output() scriptLoaded = new EventEmitter<any>();\n\n    /**\n     * Id of the element where PayPal button will be rendered\n     */\n    public payPalButtonContainerId?: string;\n\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\n\n    private payPalButtonContainerElem?: ElementRef;\n    @ViewChild('payPalButtonContainer', { static: false }) set payPalButtonContainer(content: ElementRef) {\n        this.payPalButtonContainerElem = content;\n    }\n\n    /**\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\n     */\n    private initializePayPal: boolean = true;\n\n    /**\n     * Reference to PayPal global API\n     */\n    private payPal: any;\n\n    constructor(\n        private paypalScriptService: PayPalScriptService,\n        private cdr: ChangeDetectorRef,\n        private ngZone: NgZone\n    ) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.payPalButtonContainerId) {\n            this.payPalButtonContainerId = this.generateElementId();\n        }\n\n        // first time config setup\n        const config = this.config;\n\n        if (changes.config.isFirstChange()) {\n            if (config && this.registerScript) {\n                this.initPayPalScript(config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n        }\n\n        // changes to config\n        if (!changes.config.isFirstChange()) {\n            this.reinitialize(config);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.paypalScriptService.destroyPayPalScript();\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.doPayPalCheck();\n    }\n\n    customInit(payPal: any): void {\n        this.payPal = payPal;\n        this.doPayPalCheck();\n    }\n\n    reinitialize(config: IPayPalConfig | undefined): void {\n        this.config = config;\n        this.payPal = undefined;\n        this.paypalScriptService.destroyPayPalScript();\n        this.payPalButtonContainerId = this.generateElementId();\n        this.initializePayPal = true;\n\n        if (this.payPalButtonContainerElem) {\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n            }\n        }\n\n        this.cdr.detectChanges();\n\n        if (this.config) {\n            if (!this.payPal) {\n                this.initPayPalScript(this.config, (payPal) => {\n\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            } else {\n                this.doPayPalCheck();\n            }\n        }\n    }\n\n\n    private doPayPalCheck(): void {\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n            // make sure that id is also set\n            if (this.payPalButtonContainerElem.nativeElement.id) {\n                this.initializePayPal = false;\n                this.initPayPal(this.config, this.payPal);\n            }\n        }\n    }\n\n    private initPayPalScript(config: IPayPalConfig, initPayPal: (paypal: any) => void): void {\n      console.log(\"init script\");\n        this.paypalScriptService.registerPayPalScript({\n            clientId: config.clientId,\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n            currency: config.currency,\n            vault: config.vault,\n            intent: config.intent,\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n        }, (paypal) => {\n            this.scriptLoaded.next(paypal);\n            initPayPal(paypal);\n        });\n    }\n\n    private generateElementId(): string {\n        return `ngx-captcha-id-${new Date().valueOf()}`;\n    }\n\n    private initPayPal(config: IPayPalConfig, paypal: any): void {\n        console.log(\"ran init\");\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n        this.ngZone.runOutsideAngular(() => {\n\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n            const createOrder = (data: any, actions: ICreateOrderCallbackActions) => {\n                return this.ngZone.run(() => {\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n                    }\n\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n                    }\n\n                    if (config.createOrderOnClient) {\n                        return actions.order.create(config.createOrderOnClient(data));\n                    }\n\n                    if (config.createOrderOnServer) {\n                        return config.createOrderOnServer(data);\n                    }\n\n                    throw Error(`Invalid state for 'createOrder'.`);\n                });\n            };\n            const createSubscription = (data: ICreateSubscriptionCallbackData, actions: ICreateSubscriptionCallbackActions) => {\n                return this.ngZone.run(() => {\n                    if (config.createSubscriptionOnClient) {\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\n                    }\n                    return;\n                });\n            };\n            const onShippingChange = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => {\n                return this.ngZone.run(() => {\n                    if (config.onShippingChange) {\n                        return config.onShippingChange(data, actions);\n                    }\n                });\n            };\n            const buttonsConfig = {\n                style: config.style,\n                onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\n                    return this.ngZone.run(() => {\n                        if (config.onApprove) {\n                            config.onApprove(data, actions);\n                        }\n\n                        // capture on server\n                        if (config.authorizeOnServer) {\n                            return config.authorizeOnServer(data, actions);\n                        }\n\n                        // capture on client\n                        const onClientAuthorization = config.onClientAuthorization;\n                        if (onClientAuthorization) {\n                            actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\n                                this.ngZone.run(() => {\n                                    onClientAuthorization(details);\n                                });\n                            });\n                            return;\n                        }\n                        return;\n                    });\n                },\n                onError: (error: any) => {\n                    this.ngZone.run(() => {\n                        if (config.onError) {\n                            config.onError(error);\n                        }\n                    });\n                },\n                onCancel: (data: ICancelCallbackData, actions: any) => {\n                    this.ngZone.run(() => {\n                        if (config.onCancel) {\n                            config.onCancel(data, actions);\n                        }\n                    });\n                },\n                onClick: (data: any, actions: IOnClickCallbackActions) => {\n                    this.ngZone.run(() => {\n                        if (config.onClick) {\n                            config.onClick(data, actions);\n                        }\n                    });\n                },\n                onInit: (data: IInitCallbackData, actions: IOnInitCallbackActions) => {\n                    this.ngZone.run(() => {\n                        if (config.onInit) {\n                            config.onInit(data, actions);\n                        }\n                    });\n                },\n                // Add the functions if they've been created in the config object\n                // The API only allows one of the two to be set\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\n                ...((config.createSubscriptionOnClient ) && { createSubscription }),\n                // The onShippingChange callback cannot be used with subscriptions\n                // so we only add it if it is set\n                ...(config.onShippingChange && { onShippingChange })\n            };\n\n\n            console.log('button config');\n            console.log(buttonsConfig);\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n        });\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgxPaypalComponent } from './components/paypal.component';\nimport { ScriptService } from './services/script.service';\nimport { PayPalScriptService } from './services/paypal-script.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxPaypalComponent,\n  ],\n  exports: [\n    NgxPaypalComponent,\n  ],\n  providers: [\n    ScriptService,\n    PayPalScriptService\n  ]\n})\nexport class NgxPayPalModule {\n}\n\n\n","/** Public API */\nexport * from './lib/ngx-paypal.module';\nexport * from './lib/models/paypal-models';\nexport * from './lib/components/paypal.component';\nexport * from './lib/services/paypal-script.service';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.ScriptService","i1.PayPalScriptService"],"mappings":";;;;;MAGa,aAAa,CAAA;AAEtB,IAAA,WAAA,CACc,IAAY,EAAA;QAAZ,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;KAEzB;AAED,IAAA,cAAc,CAAC,GAAW,EAAE,SAAiB,EAAE,OAAiC,EAAA;AAC5E,QAAA,MAAM,iBAAiB,GAAI,MAAc,CAAC,SAAS,CAAC,CAAC;AACrD,QAAA,IAAI,iBAAiB,EAAE;;AAEnB,YAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAK;gBACf,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC/B,aAAC,CAAC,CAAC;YACH,OAAO;AACV,SAAA;;QAID,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACpD,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAC1C,QAAA,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;AAC1B,QAAA,UAAU,CAAC,MAAM,GAAG,MAAK;AACrB,YAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAK;AACf,gBAAA,OAAO,CAAE,MAAc,CAAC,SAAS,CAAC,CAAC,CAAC;AACxC,aAAC,CAAC,CAAC;AACP,SAAC,CAAC;AACF,QAAA,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AACrB,QAAA,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC;AACxB,QAAA,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC;;AAGxB,QAAA,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;KACpE;AAED,IAAA,OAAO,CAAC,SAAiB,EAAA;;AAErB,QAAA,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;AAEtE,QAAA,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,MAAM,EAAE,CAAC;AACvB,SAAA;KACJ;AAEO,IAAA,SAAS,CAAC,SAAiB,EAAA;QAC/B,OAAO,CAAA,uBAAA,EAA0B,SAAS,CAAA,CAAE,CAAC;KAChD;;0GA9CQ,aAAa,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;8GAAb,aAAa,EAAA,CAAA,CAAA;2FAAb,aAAa,EAAA,UAAA,EAAA,CAAA;kBADzB,UAAU;;;MCIE,mBAAmB,CAAA;AAK5B,IAAA,WAAA,CACc,aAA4B,EAAA;QAA5B,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;QAJzB,IAAgB,CAAA,gBAAA,GAAG,QAAQ,CAAC;KAM5C;IAED,oBAAoB,CAAC,MAAwB,EAAE,OAAiC,EAAA;AAC5E,QAAA,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KACnG;IAED,mBAAmB,GAAA;QACf,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACrD;AAEO,IAAA,eAAe,CAAC,MAAwB,EAAA;AAC5C,QAAA,MAAM,MAAM,GAAkB;AAC1B,YAAA;AACI,gBAAA,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,MAAM,CAAC,QAAQ;AACzB,aAAA;SACJ,CAAC;QAEF,IAAI,MAAM,CAAC,QAAQ,EAAE;YACjB,MAAM,CAAC,IAAI,CAAC;AACR,gBAAA,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,MAAM,CAAC,QAAQ;AACzB,aAAA,CAAC,CAAC;AACN,SAAA;QAED,IAAI,MAAM,CAAC,MAAM,EAAE;YACf,MAAM,CAAC,IAAI,CAAC;AACR,gBAAA,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,MAAM,CAAC,MAAM;AACvB,aAAA,CAAC,CAAC;AACN,SAAA;QAED,IAAI,MAAM,CAAC,KAAK,EAAE;YACd,MAAM,CAAC,IAAI,CAAC;AACR,gBAAA,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,MAAM,CAAC,KAAK;AACtB,aAAA,CAAC,CAAC;AACN,SAAA;QAED,IAAI,MAAM,CAAC,MAAM,EAAE;YACf,MAAM,CAAC,IAAI,CAAC;AACR,gBAAA,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,MAAM,CAAC,MAAM;AACvB,aAAA,CAAC,CAAC;AACN,SAAA;QAED,IAAI,MAAM,CAAC,WAAW,EAAE;YACpB,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AACtC,SAAA;QAED,OAAO,CAAA,6BAAA,EAAgC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;KACxE;AAEO,IAAA,cAAc,CAAC,WAA0B,EAAA;QAC7C,IAAI,WAAW,GAAG,EAAE,CAAC;AAErB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,YAAA,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACT,WAAW,IAAI,GAAG,CAAC;AACtB,aAAA;AAAM,iBAAA;gBACH,WAAW,IAAI,GAAG,CAAC;AACtB,aAAA;YAED,WAAW,IAAI,CAAG,EAAA,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,KAAK,CAAA,CAAE,CAAC;AAC3D,SAAA;AAED,QAAA,OAAO,WAAW,CAAC;KACtB;;gHA5EQ,mBAAmB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,aAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;oHAAnB,mBAAmB,EAAA,CAAA,CAAA;2FAAnB,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAD/B,UAAU;;;MCoCE,kBAAkB,CAAA;AAwC3B,IAAA,WAAA,CACY,mBAAwC,EACxC,GAAsB,EACtB,MAAc,EAAA;QAFd,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;QACxC,IAAG,CAAA,GAAA,GAAH,GAAG,CAAmB;QACtB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;AApC1B;;;AAGG;QACM,IAAc,CAAA,cAAA,GAAY,IAAI,CAAC;AAExC;;AAEG;AACO,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,YAAY,EAAO,CAAC;AAOhC,QAAA,IAAA,CAAA,aAAa,GAAkB,IAAI,OAAO,EAAQ,CAAC;AAOpE;;AAEG;QACK,IAAgB,CAAA,gBAAA,GAAY,IAAI,CAAC;KAYxC;IAnBD,IAA2D,qBAAqB,CAAC,OAAmB,EAAA;AAChG,QAAA,IAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC;KAC5C;AAmBD,IAAA,WAAW,CAAC,OAAsB,EAAA;AAC9B,QAAA,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;AAC/B,YAAA,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC3D,SAAA;;AAGD,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,QAAA,IAAI,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE;AAChC,YAAA,IAAI,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;gBAC/B,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,MAAM,KAAI;;AAErC,oBAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,aAAa,EAAE,CAAC;AACzB,iBAAC,CAAC,CAAC;AACN,aAAA;AACJ,SAAA;;AAGD,QAAA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE;AACjC,YAAA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC7B,SAAA;KACJ;IAED,WAAW,GAAA;AACP,QAAA,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;AAC/C,QAAA,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;KACjC;IAED,eAAe,GAAA;QACX,IAAI,CAAC,aAAa,EAAE,CAAC;KACxB;AAED,IAAA,UAAU,CAAC,MAAW,EAAA;AAClB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,EAAE,CAAC;KACxB;AAED,IAAA,YAAY,CAAC,MAAiC,EAAA;AAC1C,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AACxB,QAAA,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;AAC/C,QAAA,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACxD,QAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAE7B,IAAI,IAAI,CAAC,yBAAyB,EAAE;AAChC,YAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC,UAAU,EAAE;AAC5D,gBAAA,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AACrH,aAAA;AACJ,SAAA;AAED,QAAA,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAEzB,IAAI,IAAI,CAAC,MAAM,EAAE;AACb,YAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,KAAI;;AAG1C,oBAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,aAAa,EAAE,CAAC;AACzB,iBAAC,CAAC,CAAC;AACN,aAAA;AAAM,iBAAA;gBACH,IAAI,CAAC,aAAa,EAAE,CAAC;AACxB,aAAA;AACJ,SAAA;KACJ;IAGO,aAAa,GAAA;AACjB,QAAA,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,yBAAyB,EAAE;;AAEvF,YAAA,IAAI,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC,EAAE,EAAE;AACjD,gBAAA,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBAC9B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,aAAA;AACJ,SAAA;KACJ;IAEO,gBAAgB,CAAC,MAAqB,EAAE,UAAiC,EAAA;AAC/E,QAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACzB,QAAA,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC;YAC1C,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,MAAM,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,SAAS;YACtF,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,WAAW,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,gBAAgB,GAAG,EAAE;SAC3G,EAAE,CAAC,MAAM,KAAI;AACV,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/B,UAAU,CAAC,MAAM,CAAC,CAAC;AACvB,SAAC,CAAC,CAAC;KACN;IAEO,iBAAiB,GAAA;QACrB,OAAO,CAAA,eAAA,EAAkB,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC;KACnD;IAEO,UAAU,CAAC,MAAqB,EAAE,MAAW,EAAA;AACjD,QAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;;AAExB,QAAA,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAK;;AAG/B,YAAA,MAAM,WAAW,GAAG,CAAC,IAAS,EAAE,OAAoC,KAAI;AACpE,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;AACxB,oBAAA,IAAI,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,mBAAmB,EAAE;AAC1D,wBAAA,MAAM,KAAK,CAAC,CAAA;AACgB,mDAAA,CAAA,CAAC,CAAC;AACjC,qBAAA;oBAED,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;AAC5D,wBAAA,MAAM,KAAK,CAAC,CAAA;AAC4B,+DAAA,CAAA,CAAC,CAAC;AAC7C,qBAAA;oBAED,IAAI,MAAM,CAAC,mBAAmB,EAAE;AAC5B,wBAAA,OAAO,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;AACjE,qBAAA;oBAED,IAAI,MAAM,CAAC,mBAAmB,EAAE;AAC5B,wBAAA,OAAO,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAC3C,qBAAA;AAED,oBAAA,MAAM,KAAK,CAAC,CAAkC,gCAAA,CAAA,CAAC,CAAC;AACpD,iBAAC,CAAC,CAAC;AACP,aAAC,CAAC;AACF,YAAA,MAAM,kBAAkB,GAAG,CAAC,IAAqC,EAAE,OAA2C,KAAI;AAC9G,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;oBACxB,IAAI,MAAM,CAAC,0BAA0B,EAAE;AACnC,wBAAA,OAAO,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/E,qBAAA;oBACD,OAAO;AACX,iBAAC,CAAC,CAAC;AACP,aAAC,CAAC;AACF,YAAA,MAAM,gBAAgB,GAAG,CAAC,IAA2B,EAAE,OAAiC,KAAI;AACxF,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;oBACxB,IAAI,MAAM,CAAC,gBAAgB,EAAE;wBACzB,OAAO,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjD,qBAAA;AACL,iBAAC,CAAC,CAAC;AACP,aAAC,CAAC;AACF,YAAA,MAAM,aAAa,GAAG;gBAClB,KAAK,EAAE,MAAM,CAAC,KAAK;AACnB,gBAAA,SAAS,EAAE,CAAC,IAA4B,EAAE,OAAkC,KAAI;AAC5E,oBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;wBACxB,IAAI,MAAM,CAAC,SAAS,EAAE;AAClB,4BAAA,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACnC,yBAAA;;wBAGD,IAAI,MAAM,CAAC,iBAAiB,EAAE;4BAC1B,OAAO,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAClD,yBAAA;;AAGD,wBAAA,MAAM,qBAAqB,GAAG,MAAM,CAAC,qBAAqB,CAAC;AAC3D,wBAAA,IAAI,qBAAqB,EAAE;4BACvB,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,OAAqC,KAAI;AACnE,gCAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;oCACjB,qBAAqB,CAAC,OAAO,CAAC,CAAC;AACnC,iCAAC,CAAC,CAAC;AACP,6BAAC,CAAC,CAAC;4BACH,OAAO;AACV,yBAAA;wBACD,OAAO;AACX,qBAAC,CAAC,CAAC;iBACN;AACD,gBAAA,OAAO,EAAE,CAAC,KAAU,KAAI;AACpB,oBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;wBACjB,IAAI,MAAM,CAAC,OAAO,EAAE;AAChB,4BAAA,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACzB,yBAAA;AACL,qBAAC,CAAC,CAAC;iBACN;AACD,gBAAA,QAAQ,EAAE,CAAC,IAAyB,EAAE,OAAY,KAAI;AAClD,oBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;wBACjB,IAAI,MAAM,CAAC,QAAQ,EAAE;AACjB,4BAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAClC,yBAAA;AACL,qBAAC,CAAC,CAAC;iBACN;AACD,gBAAA,OAAO,EAAE,CAAC,IAAS,EAAE,OAAgC,KAAI;AACrD,oBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;wBACjB,IAAI,MAAM,CAAC,OAAO,EAAE;AAChB,4BAAA,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjC,yBAAA;AACL,qBAAC,CAAC,CAAC;iBACN;AACD,gBAAA,MAAM,EAAE,CAAC,IAAuB,EAAE,OAA+B,KAAI;AACjE,oBAAA,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAK;wBACjB,IAAI,MAAM,CAAC,MAAM,EAAE;AACf,4BAAA,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAChC,yBAAA;AACL,qBAAC,CAAC,CAAC;iBACN;;;AAGD,gBAAA,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,mBAAmB,KAAK,EAAE,WAAW,EAAE,CAAC;gBAClF,IAAI,CAAC,MAAM,CAAC,0BAA0B,KAAM,EAAE,kBAAkB,EAAE,CAAC;;;gBAGnE,IAAI,MAAM,CAAC,gBAAgB,IAAI,EAAE,gBAAgB,EAAE,CAAC;aACvD,CAAC;AAGF,YAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC7B,YAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,YAAA,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAA,CAAA,EAAI,IAAI,CAAC,uBAAuB,CAAA,CAAE,CAAC,CAAC;AAC7E,SAAC,CAAC,CAAC;KACN;;+GAjQQ,kBAAkB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAC,mBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAlB,kBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,kBAAkB,EAJjB,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,EAAA,OAAA,EAAA,EAAA,YAAA,EAAA,cAAA,EAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,uBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,CAAA,uBAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,CAAA,EAAA,aAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA;;AAET,IAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;2FAEQ,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAP9B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;oBACP,eAAe,EAAE,uBAAuB,CAAC,MAAM;AAC/C,oBAAA,QAAQ,EAAE,YAAY;AACtB,oBAAA,QAAQ,EAAE,CAAA;;AAET,IAAA,CAAA;AACJ,iBAAA,CAAA;4JAMY,MAAM,EAAA,CAAA;sBAAd,KAAK;gBAMG,cAAc,EAAA,CAAA;sBAAtB,KAAK;gBAKI,YAAY,EAAA,CAAA;sBAArB,MAAM;gBAUoD,qBAAqB,EAAA,CAAA;sBAA/E,SAAS;AAAC,gBAAA,IAAA,EAAA,CAAA,uBAAuB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;;;MC7C5C,eAAe,CAAA;;4GAAf,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAf,eAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,EAVxB,YAAA,EAAA,CAAA,kBAAkB,CAHlB,EAAA,OAAA,EAAA,CAAA,YAAY,aAMZ,kBAAkB,CAAA,EAAA,CAAA,CAAA;AAOT,eAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,EALf,SAAA,EAAA;QACT,aAAa;QACb,mBAAmB;KACpB,EAZQ,OAAA,EAAA,CAAA;YACP,YAAY;AACb,SAAA,CAAA,EAAA,CAAA,CAAA;2FAYU,eAAe,EAAA,UAAA,EAAA,CAAA;kBAf3B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,OAAO,EAAE;wBACP,YAAY;AACb,qBAAA;AACD,oBAAA,YAAY,EAAE;wBACZ,kBAAkB;AACnB,qBAAA;AACD,oBAAA,OAAO,EAAE;wBACP,kBAAkB;AACnB,qBAAA;AACD,oBAAA,SAAS,EAAE;wBACT,aAAa;wBACb,mBAAmB;AACpB,qBAAA;AACF,iBAAA,CAAA;;;ACrBD;;ACAA;;AAEG;;;;"}},"fesm2015":{"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nclass ScriptService {\n    constructor(zone) {\n        this.zone = zone;\n    }\n    registerScript(url, globalVar, onReady) {\n        const existingGlobalVar = window[globalVar];\n        if (existingGlobalVar) {\n            // global variable is present = script was already loaded\n            this.zone.run(() => {\n                onReady(existingGlobalVar);\n            });\n            return;\n        }\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.id = this.getElemId(globalVar);\n        scriptElem.innerHTML = '';\n        scriptElem.onload = () => {\n            this.zone.run(() => {\n                onReady(window[globalVar]);\n            });\n        };\n        scriptElem.src = url;\n        scriptElem.async = true;\n        scriptElem.defer = true;\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n    cleanup(globalVar) {\n        // remove script from DOM\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\n        if (scriptElem) {\n            scriptElem.remove();\n        }\n    }\n    getElemId(globalVar) {\n        return `ngx-paypal-script-elem-${globalVar}`;\n    }\n}\nScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: ScriptService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: ScriptService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass PayPalScriptService {\n    constructor(scriptService) {\n        this.scriptService = scriptService;\n        this.paypalWindowName = 'paypal';\n    }\n    registerPayPalScript(config, onReady) {\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n    destroyPayPalScript() {\n        this.scriptService.cleanup(this.paypalWindowName);\n    }\n    getUrlForConfig(config) {\n        const params = [\n            {\n                name: 'client-id',\n                value: config.clientId\n            }\n        ];\n        if (config.currency) {\n            params.push({\n                name: 'currency',\n                value: config.currency\n            });\n        }\n        if (config.commit) {\n            params.push({\n                name: 'commit',\n                value: config.commit\n            });\n        }\n        if (config.vault) {\n            params.push({\n                name: 'vault',\n                value: config.vault\n            });\n        }\n        if (config.intent) {\n            params.push({\n                name: 'intent',\n                value: config.intent\n            });\n        }\n        if (config.extraParams) {\n            params.push(...config.extraParams);\n        }\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n    getQueryString(queryParams) {\n        let queryString = '';\n        for (let i = 0; i < queryParams.length; i++) {\n            const queryParam = queryParams[i];\n            if (i === 0) {\n                queryString += '?';\n            }\n            else {\n                queryString += '&';\n            }\n            queryString += `${queryParam.name}=${queryParam.value}`;\n        }\n        return queryString;\n    }\n}\nPayPalScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PayPalScriptService, deps: [{ token: ScriptService }], target: i0.ɵɵFactoryTarget.Injectable });\nPayPalScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PayPalScriptService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PayPalScriptService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScriptService }]; } });\n\nclass NgxPaypalComponent {\n    constructor(paypalScriptService, cdr, ngZone) {\n        this.paypalScriptService = paypalScriptService;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n        /**\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\n         * sharing base configuration. In such a case only a single component may register script.\n         */\n        this.registerScript = true;\n        /**\n         * Emitted when paypal script is loaded\n         */\n        this.scriptLoaded = new EventEmitter();\n        this.ngUnsubscribe = new Subject();\n        /**\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\n         */\n        this.initializePayPal = true;\n    }\n    set payPalButtonContainer(content) {\n        this.payPalButtonContainerElem = content;\n    }\n    ngOnChanges(changes) {\n        if (!this.payPalButtonContainerId) {\n            this.payPalButtonContainerId = this.generateElementId();\n        }\n        // first time config setup\n        const config = this.config;\n        if (changes.config.isFirstChange()) {\n            if (config && this.registerScript) {\n                this.initPayPalScript(config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n        }\n        // changes to config\n        if (!changes.config.isFirstChange()) {\n            this.reinitialize(config);\n        }\n    }\n    ngOnDestroy() {\n        this.paypalScriptService.destroyPayPalScript();\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n    ngAfterViewInit() {\n        this.doPayPalCheck();\n    }\n    customInit(payPal) {\n        this.payPal = payPal;\n        this.doPayPalCheck();\n    }\n    reinitialize(config) {\n        this.config = config;\n        this.payPal = undefined;\n        this.paypalScriptService.destroyPayPalScript();\n        this.payPalButtonContainerId = this.generateElementId();\n        this.initializePayPal = true;\n        if (this.payPalButtonContainerElem) {\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n            }\n        }\n        this.cdr.detectChanges();\n        if (this.config) {\n            if (!this.payPal) {\n                this.initPayPalScript(this.config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n            else {\n                this.doPayPalCheck();\n            }\n        }\n    }\n    doPayPalCheck() {\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n            // make sure that id is also set\n            if (this.payPalButtonContainerElem.nativeElement.id) {\n                this.initializePayPal = false;\n                this.initPayPal(this.config, this.payPal);\n            }\n        }\n    }\n    initPayPalScript(config, initPayPal) {\n        console.log(\"init script\");\n        this.paypalScriptService.registerPayPalScript({\n            clientId: config.clientId,\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n            currency: config.currency,\n            vault: config.vault,\n            intent: config.intent,\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n        }, (paypal) => {\n            this.scriptLoaded.next(paypal);\n            initPayPal(paypal);\n        });\n    }\n    generateElementId() {\n        return `ngx-captcha-id-${new Date().valueOf()}`;\n    }\n    initPayPal(config, paypal) {\n        console.log(\"ran init\");\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n        this.ngZone.runOutsideAngular(() => {\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n            const createOrder = (data, actions) => {\n                return this.ngZone.run(() => {\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n                    }\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n                    }\n                    if (config.createOrderOnClient) {\n                        return actions.order.create(config.createOrderOnClient(data));\n                    }\n                    if (config.createOrderOnServer) {\n                        return config.createOrderOnServer(data);\n                    }\n                    throw Error(`Invalid state for 'createOrder'.`);\n                });\n            };\n            const createSubscription = (data, actions) => {\n                return this.ngZone.run(() => {\n                    if (config.createSubscriptionOnClient) {\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\n                    }\n                    return;\n                });\n            };\n            const onShippingChange = (data, actions) => {\n                return this.ngZone.run(() => {\n                    if (config.onShippingChange) {\n                        return config.onShippingChange(data, actions);\n                    }\n                });\n            };\n            const buttonsConfig = Object.assign(Object.assign(Object.assign({ style: config.style, onApprove: (data, actions) => {\n                    return this.ngZone.run(() => {\n                        if (config.onApprove) {\n                            config.onApprove(data, actions);\n                        }\n                        // capture on server\n                        if (config.authorizeOnServer) {\n                            return config.authorizeOnServer(data, actions);\n                        }\n                        // capture on client\n                        const onClientAuthorization = config.onClientAuthorization;\n                        if (onClientAuthorization) {\n                            actions.order.capture().then((details) => {\n                                this.ngZone.run(() => {\n                                    onClientAuthorization(details);\n                                });\n                            });\n                            return;\n                        }\n                        return;\n                    });\n                }, onError: (error) => {\n                    this.ngZone.run(() => {\n                        if (config.onError) {\n                            config.onError(error);\n                        }\n                    });\n                }, onCancel: (data, actions) => {\n                    this.ngZone.run(() => {\n                        if (config.onCancel) {\n                            config.onCancel(data, actions);\n                        }\n                    });\n                }, onClick: (data, actions) => {\n                    this.ngZone.run(() => {\n                        if (config.onClick) {\n                            config.onClick(data, actions);\n                        }\n                    });\n                }, onInit: (data, actions) => {\n                    this.ngZone.run(() => {\n                        if (config.onInit) {\n                            config.onInit(data, actions);\n                        }\n                    });\n                } }, ((config.createOrderOnClient || config.createOrderOnServer) && { createOrder })), ((config.createSubscriptionOnClient) && { createSubscription })), (config.onShippingChange && { onShippingChange }));\n            console.log('button config');\n            console.log(buttonsConfig);\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n        });\n    }\n}\nNgxPaypalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaypalComponent, deps: [{ token: PayPalScriptService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nNgxPaypalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: NgxPaypalComponent, selector: \"ngx-paypal\", inputs: { config: \"config\", registerScript: \"registerScript\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, viewQueries: [{ propertyName: \"payPalButtonContainer\", first: true, predicate: [\"payPalButtonContainer\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaypalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    selector: 'ngx-paypal',\n                    template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n                }]\n        }], ctorParameters: function () { return [{ type: PayPalScriptService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{\n                type: Input\n            }], registerScript: [{\n                type: Input\n            }], scriptLoaded: [{\n                type: Output\n            }], payPalButtonContainer: [{\n                type: ViewChild,\n                args: ['payPalButtonContainer', { static: false }]\n            }] } });\n\nclass NgxPayPalModule {\n}\nNgxPayPalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxPayPalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, declarations: [NgxPaypalComponent], imports: [CommonModule], exports: [NgxPaypalComponent] });\nNgxPayPalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, providers: [\n        ScriptService,\n        PayPalScriptService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPayPalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        NgxPaypalComponent,\n                    ],\n                    exports: [\n                        NgxPaypalComponent,\n                    ],\n                    providers: [\n                        ScriptService,\n                        PayPalScriptService\n                    ]\n                }]\n        }] });\n\n/** Public API */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };\n//# sourceMappingURL=doctopia-ngx-paypal.mjs.map\n","map":{"version":3,"file":"doctopia-ngx-paypal.mjs","sources":["../../src/lib/services/script.service.ts","../../src/lib/services/paypal-script.service.ts","../../src/lib/components/paypal.component.ts","../../src/lib/ngx-paypal.module.ts","../../src/public_api.ts","../../src/doctopia-ngx-paypal.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\n\n@Injectable()\nexport class ScriptService {\n\n    constructor(\n        protected zone: NgZone,\n    ) {\n    }\n\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\n        const existingGlobalVar = (window as any)[globalVar];\n        if (existingGlobalVar) {\n            // global variable is present = script was already loaded\n            this.zone.run(() => {\n                onReady(existingGlobalVar);\n            });\n            return;\n        }\n\n\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.id = this.getElemId(globalVar);\n        scriptElem.innerHTML = '';\n        scriptElem.onload = () => {\n            this.zone.run(() => {\n                onReady((window as any)[globalVar]);\n            });\n        };\n        scriptElem.src = url;\n        scriptElem.async = true;\n        scriptElem.defer = true;\n\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n\n    cleanup(globalVar: string): void {\n        // remove script from DOM\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\n\n        if (scriptElem) {\n            scriptElem.remove();\n        }\n    }\n\n    private getElemId(globalVar: string): string {\n        return `ngx-paypal-script-elem-${globalVar}`;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { IPayPalUrlConfig, IQueryParam } from '../models/paypal-models';\nimport { ScriptService } from './script.service';\n\n@Injectable()\nexport class PayPalScriptService {\n\n    private readonly paypalWindowName = 'paypal';\n\n\n    constructor(\n        protected scriptService: ScriptService,\n    ) {\n    }\n\n    registerPayPalScript(config: IPayPalUrlConfig, onReady: (payPalApi: any) => void): void {\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n\n    destroyPayPalScript(): void {\n        this.scriptService.cleanup(this.paypalWindowName);\n    }\n\n    private getUrlForConfig(config: IPayPalUrlConfig): string {\n        const params: IQueryParam[] = [\n            {\n                name: 'client-id',\n                value: config.clientId\n            }\n        ];\n\n        if (config.currency) {\n            params.push({\n                name: 'currency',\n                value: config.currency\n            });\n        }\n\n        if (config.commit) {\n            params.push({\n                name: 'commit',\n                value: config.commit\n            });\n        }\n\n        if (config.vault) {\n            params.push({\n                name: 'vault',\n                value: config.vault\n            });\n        }\n\n        if (config.intent) {\n            params.push({\n                name: 'intent',\n                value: config.intent\n            });\n        }\n\n        if (config.extraParams) {\n            params.push(...config.extraParams);\n        }\n\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n\n    private getQueryString(queryParams: IQueryParam[]): string {\n        let queryString = '';\n\n        for (let i = 0; i < queryParams.length; i++) {\n            const queryParam = queryParams[i];\n            if (i === 0) {\n                queryString += '?';\n            } else {\n                queryString += '&';\n            }\n\n            queryString += `${queryParam.name}=${queryParam.value}`;\n        }\n\n        return queryString;\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport {\n    ICancelCallbackData,\n    IClientAuthorizeCallbackData,\n    ICreateOrderCallbackActions,\n    IInitCallbackData,\n    IOnApproveCallbackActions,\n    IOnApproveCallbackData,\n    IOnClickCallbackActions,\n    IOnInitCallbackActions,\n    IOnShippingChangeActions,\n    IOnShippingChangeData,\n    IPayPalConfig,\n    ICreateSubscriptionCallbackActions,\n    ICreateSubscriptionCallbackData,\n} from '../models/paypal-models';\nimport { PayPalScriptService } from '../services/paypal-script.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'ngx-paypal',\n    template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n})\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\n\n    /**\n     * Configuration for paypal.\n     */\n    @Input() config?: IPayPalConfig;\n\n    /**\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\n     * sharing base configuration. In such a case only a single component may register script.\n     */\n    @Input() registerScript: boolean = true;\n\n    /**\n     * Emitted when paypal script is loaded\n     */\n    @Output() scriptLoaded = new EventEmitter<any>();\n\n    /**\n     * Id of the element where PayPal button will be rendered\n     */\n    public payPalButtonContainerId?: string;\n\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\n\n    private payPalButtonContainerElem?: ElementRef;\n    @ViewChild('payPalButtonContainer', { static: false }) set payPalButtonContainer(content: ElementRef) {\n        this.payPalButtonContainerElem = content;\n    }\n\n    /**\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\n     */\n    private initializePayPal: boolean = true;\n\n    /**\n     * Reference to PayPal global API\n     */\n    private payPal: any;\n\n    constructor(\n        private paypalScriptService: PayPalScriptService,\n        private cdr: ChangeDetectorRef,\n        private ngZone: NgZone\n    ) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.payPalButtonContainerId) {\n            this.payPalButtonContainerId = this.generateElementId();\n        }\n\n        // first time config setup\n        const config = this.config;\n\n        if (changes.config.isFirstChange()) {\n            if (config && this.registerScript) {\n                this.initPayPalScript(config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n        }\n\n        // changes to config\n        if (!changes.config.isFirstChange()) {\n            this.reinitialize(config);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.paypalScriptService.destroyPayPalScript();\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.doPayPalCheck();\n    }\n\n    customInit(payPal: any): void {\n        this.payPal = payPal;\n        this.doPayPalCheck();\n    }\n\n    reinitialize(config: IPayPalConfig | undefined): void {\n        this.config = config;\n        this.payPal = undefined;\n        this.paypalScriptService.destroyPayPalScript();\n        this.payPalButtonContainerId = this.generateElementId();\n        this.initializePayPal = true;\n\n        if (this.payPalButtonContainerElem) {\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n            }\n        }\n\n        this.cdr.detectChanges();\n\n        if (this.config) {\n            if (!this.payPal) {\n                this.initPayPalScript(this.config, (payPal) => {\n\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            } else {\n                this.doPayPalCheck();\n            }\n        }\n    }\n\n\n    private doPayPalCheck(): void {\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n            // make sure that id is also set\n            if (this.payPalButtonContainerElem.nativeElement.id) {\n                this.initializePayPal = false;\n                this.initPayPal(this.config, this.payPal);\n            }\n        }\n    }\n\n    private initPayPalScript(config: IPayPalConfig, initPayPal: (paypal: any) => void): void {\n      console.log(\"init script\");\n        this.paypalScriptService.registerPayPalScript({\n            clientId: config.clientId,\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n            currency: config.currency,\n            vault: config.vault,\n            intent: config.intent,\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n        }, (paypal) => {\n            this.scriptLoaded.next(paypal);\n            initPayPal(paypal);\n        });\n    }\n\n    private generateElementId(): string {\n        return `ngx-captcha-id-${new Date().valueOf()}`;\n    }\n\n    private initPayPal(config: IPayPalConfig, paypal: any): void {\n        console.log(\"ran init\");\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n        this.ngZone.runOutsideAngular(() => {\n\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n            const createOrder = (data: any, actions: ICreateOrderCallbackActions) => {\n                return this.ngZone.run(() => {\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n                    }\n\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n                    }\n\n                    if (config.createOrderOnClient) {\n                        return actions.order.create(config.createOrderOnClient(data));\n                    }\n\n                    if (config.createOrderOnServer) {\n                        return config.createOrderOnServer(data);\n                    }\n\n                    throw Error(`Invalid state for 'createOrder'.`);\n                });\n            };\n            const createSubscription = (data: ICreateSubscriptionCallbackData, actions: ICreateSubscriptionCallbackActions) => {\n                return this.ngZone.run(() => {\n                    if (config.createSubscriptionOnClient) {\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\n                    }\n                    return;\n                });\n            };\n            const onShippingChange = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => {\n                return this.ngZone.run(() => {\n                    if (config.onShippingChange) {\n                        return config.onShippingChange(data, actions);\n                    }\n                });\n            };\n            const buttonsConfig = {\n                style: config.style,\n                onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\n                    return this.ngZone.run(() => {\n                        if (config.onApprove) {\n                            config.onApprove(data, actions);\n                        }\n\n                        // capture on server\n                        if (config.authorizeOnServer) {\n                            return config.authorizeOnServer(data, actions);\n                        }\n\n                        // capture on client\n                        const onClientAuthorization = config.onClientAuthorization;\n                        if (onClientAuthorization) {\n                            actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\n                                this.ngZone.run(() => {\n                                    onClientAuthorization(details);\n                                });\n                            });\n                            return;\n                        }\n                        return;\n                    });\n                },\n                onError: (error: any) => {\n                    this.ngZone.run(() => {\n                        if (config.onError) {\n                            config.onError(error);\n                        }\n                    });\n                },\n                onCancel: (data: ICancelCallbackData, actions: any) => {\n                    this.ngZone.run(() => {\n                        if (config.onCancel) {\n                            config.onCancel(data, actions);\n                        }\n                    });\n                },\n                onClick: (data: any, actions: IOnClickCallbackActions) => {\n                    this.ngZone.run(() => {\n                        if (config.onClick) {\n                            config.onClick(data, actions);\n                        }\n                    });\n                },\n                onInit: (data: IInitCallbackData, actions: IOnInitCallbackActions) => {\n                    this.ngZone.run(() => {\n                        if (config.onInit) {\n                            config.onInit(data, actions);\n                        }\n                    });\n                },\n                // Add the functions if they've been created in the config object\n                // The API only allows one of the two to be set\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\n                ...((config.createSubscriptionOnClient ) && { createSubscription }),\n                // The onShippingChange callback cannot be used with subscriptions\n                // so we only add it if it is set\n                ...(config.onShippingChange && { onShippingChange })\n            };\n\n\n            console.log('button config');\n            console.log(buttonsConfig);\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n        });\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgxPaypalComponent } from './components/paypal.component';\nimport { ScriptService } from './services/script.service';\nimport { PayPalScriptService } from './services/paypal-script.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxPaypalComponent,\n  ],\n  exports: [\n    NgxPaypalComponent,\n  ],\n  providers: [\n    ScriptService,\n    PayPalScriptService\n  ]\n})\nexport class NgxPayPalModule {\n}\n\n\n","/** Public API */\nexport * from './lib/ngx-paypal.module';\nexport * from './lib/models/paypal-models';\nexport * from './lib/components/paypal.component';\nexport * from './lib/services/paypal-script.service';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.ScriptService","i1.PayPalScriptService"],"mappings":"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"}}}